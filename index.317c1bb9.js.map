{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAO,CACX,SAAU,SAAS,aAAa,CAAC,UACjC,WAAY,SAAS,gBAAgB,CAAC,eACtC,UAAW,SAAS,gBAAgB,CAAC,cACrC,aAAc,SAAS,aAAa,CAAC,kBACrC,YAAa,SAAS,aAAa,CAAC,iBACpC,WAAY,SAAS,aAAa,CAAC,gBACnC,MAAO,SAAS,aAAa,CAAC,cAChC,EASM,EAAe,SAArB,CAAA,MAmEmB,EAPT,EA6CA,EAAY,EAEd,EAIA,EA5CW,EAnEK,EAAA,GAAA,CA8DtB,CAFQ,EAAa,EAAb,QAAR,EAES,SAAS,CAAC,MAAM,CAAC,SAC1B,EAAS,SAAS,CAAC,GAAG,CAAC,WACvB,EAAS,WAAW,CAAG,UAyCf,EAA0B,EAA1B,UAAA,CAAY,EAAc,EAAd,SAApB,CAMM,EAAmB,CAJnB,EAAO,AAAe,cArCM,GAqCS,AAAc,eArCvB,EAsC7B,EAAG,GACJ,AA0EN,SAA4B,CAAK,EAI/B,IAAK,IAHC,EAAU,EAAM,MAAM,CA1LT,EA2Lb,EAAe,EAAE,CAEd,EAAM,EAAG,EA7LC,EA6LmB,IAAO,CAE3C,IAAK,IADC,EAAW,EAAE,CACV,EAAM,EAAG,EAAM,EAAS,IAAO,CACtC,IAAM,EAAQ,AAhMC,EAgMD,EAAqB,EACnC,EAAS,IAAI,CAAC,CAAK,CAAC,EAAM,CAC5B,CACA,EAAa,IAAI,CAAC,CAAE,SAAA,CAAS,EAC/B,CAEA,OAAO,CACT,EAxFyB,IAGpB,GAAG,CAAC,SAAC,CADR,EACgB,OAAC,EAAG,EAAI,QAAQ,EAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n/* eslint-disable */ var refs = {\n    startBtn: document.querySelector(\".start\"),\n    fieldCells: document.querySelectorAll(\".field-cell\"),\n    fieldRows: document.querySelectorAll(\".field-row\"),\n    messageStart: document.querySelector(\".message-start\"),\n    messageLose: document.querySelector(\".message-lose\"),\n    messageWin: document.querySelector(\".message-win\"),\n    score: document.querySelector(\".game-score\")\n};\nvar WIN_VALUE = 2048;\nvar FIELD_SIZE = 16; // Adjusted to the total number of cells\nvar NEW_CELL_VALUE = 2;\nvar RARE_NEW_CELL_VALUE = 4;\nvar RARE_CELL_CHANCE = 10;\nvar FIELD_LENGTH = 4;\nvar inputHandler = function(param) {\n    var key = param.key;\n    moveCells(key);\n};\nrefs.startBtn.addEventListener(\"click\", newGame);\nfunction newGame() {\n    resetField();\n    addCell(getRandomCell(), getToken());\n    addCell(getRandomCell(), getToken());\n    window.addEventListener(\"keydown\", inputHandler);\n}\nfunction getRandomCell() {\n    var emptyCells = _to_consumable_array(refs.fieldCells).map(function(cell, index) {\n        return cell.textContent === \"\" ? index : -1;\n    }).filter(function(index) {\n        return index !== -1;\n    });\n    if (emptyCells.length === 0) return -1;\n    var randomIndex = getRandomNum(emptyCells.length);\n    return emptyCells[randomIndex];\n}\nfunction getToken() {\n    return getRandomNum(100) <= RARE_CELL_CHANCE ? RARE_NEW_CELL_VALUE : NEW_CELL_VALUE;\n}\nfunction getRandomNum(maxVal) {\n    return Math.floor(Math.random() * maxVal);\n}\nfunction hasFreeSpace() {\n    return _to_consumable_array(refs.fieldCells).some(function(cell) {\n        return cell.textContent === \"\";\n    });\n}\nfunction resetField() {\n    var messageStart = refs.messageStart, messageLose = refs.messageLose, messageWin = refs.messageWin, score = refs.score, fieldCells = refs.fieldCells;\n    score.textContent = \"0\";\n    [\n        messageStart,\n        messageLose,\n        messageWin\n    ].forEach(function(param) {\n        var classList = param.classList;\n        return classList.add(\"hidden\");\n    });\n    fieldCells.forEach(function(cell) {\n        _to_consumable_array(cell.classList).forEach(function(cls) {\n            if (cls.startsWith(\"field-cell--\")) cell.classList.remove(cls);\n        });\n        cell.textContent = \"\";\n    });\n}\nfunction updateStartButton() {\n    var startBtn = refs.startBtn;\n    startBtn.classList.remove(\"start\");\n    startBtn.classList.add(\"restart\");\n    startBtn.textContent = \"Restart\";\n}\nfunction moveCells(keyPressed) {\n    updateStartButton();\n    var cellsMoved = rearrangeCells(keyPressed);\n    if (cellsMoved) addCell(getRandomCell(), getToken());\n    if (!hasFreeSpace() && !hasPossibleMoves()) finishGame(refs.messageLose);\n}\nfunction addCell(cellPosition, cellValue) {\n    if (cellPosition === -1) return;\n    var fieldCells = refs.fieldCells;\n    var cell = fieldCells[cellPosition];\n    cell.classList.add(\"field-cell--\".concat(cellValue));\n    cell.textContent = cellValue;\n}\nfunction finishGame(endGameMessage) {\n    endGameMessage.classList.remove(\"hidden\");\n    window.removeEventListener(\"keydown\", inputHandler);\n}\nfunction updateScore(points) {\n    var score = refs.score;\n    var currentPoints = +score.textContent;\n    score.textContent = currentPoints + points;\n}\nfunction rearrangeCells(direction) {\n    var fieldCells = refs.fieldCells, fieldRows = refs.fieldRows;\n    var rows = direction === \"ArrowLeft\" || direction === \"ArrowRight\" ? _to_consumable_array(fieldRows) : createFieldColumns(fieldCells);\n    var initialRowValues = rows.map(function(row) {\n        return _to_consumable_array(row.children).map(function(cel) {\n            return cel.textContent;\n        });\n    }).flat();\n    rows.forEach(function(row) {\n        var initialCells = direction === \"ArrowLeft\" || direction === \"ArrowUp\" ? _to_consumable_array(row.children) : _to_consumable_array(row.children).reverse();\n        var filledCellsValues = initialCells.filter(function(cell) {\n            return cell.textContent !== \"\";\n        }).map(function(param) {\n            var textContent = param.textContent;\n            return parseInt(textContent);\n        });\n        for(var i = 1; i < filledCellsValues.length; i++)if (filledCellsValues[i] === filledCellsValues[i - 1]) {\n            filledCellsValues[i - 1] = filledCellsValues[i - 1] * 2;\n            updateScore(filledCellsValues[i - 1]);\n            filledCellsValues.splice(i, 1);\n            filledCellsValues.push(\"\");\n        }\n        var updatedCells = direction === \"ArrowLeft\" || direction === \"ArrowUp\" ? _to_consumable_array(filledCellsValues).concat([\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n        ]).slice(0, FIELD_LENGTH) : _to_consumable_array(filledCellsValues).concat([\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n        ]).slice(0, FIELD_LENGTH).reverse();\n        _to_consumable_array(row.children).forEach(function(cell, i) {\n            var cellValue = updatedCells[i];\n            cell.textContent = cellValue ? cellValue.toString() : \"\";\n            _to_consumable_array(cell.classList).forEach(function(cls) {\n                if (cls.startsWith(\"field-cell--\")) cell.classList.remove(cls);\n            });\n            if (cellValue) {\n                cell.classList.add(\"field-cell--\".concat(cellValue));\n                if (cellValue === WIN_VALUE) finishGame(refs.messageWin);\n            }\n        });\n    });\n    var finalRowValues = rows.map(function(row) {\n        return _to_consumable_array(row.children).map(function(cel) {\n            return cel.textContent;\n        });\n    }).flat();\n    return !arraysEqual(initialRowValues, finalRowValues);\n}\nfunction hasPossibleMoves() {\n    var fieldRows = refs.fieldRows;\n    for(var rowIndex = 0; rowIndex < fieldRows.length; rowIndex++)for(var cellIndex = 0; cellIndex < fieldRows[rowIndex].children.length; cellIndex++){\n        var cell = fieldRows[rowIndex].children[cellIndex];\n        var cellValue = cell.textContent;\n        if (fieldRows[rowIndex].children[cellIndex + 1] && cellValue === fieldRows[rowIndex].children[cellIndex + 1].textContent || fieldRows[rowIndex + 1] && cellValue === fieldRows[rowIndex + 1].children[cellIndex].textContent) return true;\n    }\n    return false;\n}\nfunction createFieldColumns(cells) {\n    var numCols = cells.length / FIELD_LENGTH;\n    var fieldColumns = [];\n    for(var row = 0; row < FIELD_LENGTH; row++){\n        var children = [];\n        for(var col = 0; col < numCols; col++){\n            var index = col * FIELD_LENGTH + row;\n            children.push(cells[index]);\n        }\n        fieldColumns.push({\n            children: children\n        });\n    }\n    return fieldColumns;\n}\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.317c1bb9.js.map\n","'use strict';\n/* eslint-disable */\nconst refs = {\n  startBtn: document.querySelector('.start'),\n  fieldCells: document.querySelectorAll('.field-cell'),\n  fieldRows: document.querySelectorAll('.field-row'),\n  messageStart: document.querySelector('.message-start'),\n  messageLose: document.querySelector('.message-lose'),\n  messageWin: document.querySelector('.message-win'),\n  score: document.querySelector('.game-score'),\n};\n\nconst WIN_VALUE = 2048;\nconst FIELD_SIZE = 16; // Adjusted to the total number of cells\nconst NEW_CELL_VALUE = 2;\nconst RARE_NEW_CELL_VALUE = 4;\nconst RARE_CELL_CHANCE = 10;\nconst FIELD_LENGTH = 4;\n\nconst inputHandler = ({ key }) => {\n  moveCells(key);\n};\n\nrefs.startBtn.addEventListener('click', newGame);\n\nfunction newGame() {\n  resetField();\n  addCell(getRandomCell(), getToken());\n  addCell(getRandomCell(), getToken());\n  window.addEventListener('keydown', inputHandler);\n}\n\nfunction getRandomCell() {\n  const emptyCells = [...refs.fieldCells]\n    .map((cell, index) => (cell.textContent === '' ? index : -1))\n    .filter(index => index !== -1);\n\n  if (emptyCells.length === 0) {\n    return -1;\n  }\n\n  const randomIndex = getRandomNum(emptyCells.length);\n  return emptyCells[randomIndex];\n}\n\nfunction getToken() {\n  return getRandomNum(100) <= RARE_CELL_CHANCE\n    ? RARE_NEW_CELL_VALUE\n    : NEW_CELL_VALUE;\n}\n\nfunction getRandomNum(maxVal) {\n  return Math.floor(Math.random() * maxVal);\n}\n\nfunction hasFreeSpace() {\n  return [...refs.fieldCells].some((cell) => cell.textContent === '');\n}\n\nfunction resetField() {\n  const { messageStart, messageLose, messageWin, score, fieldCells } = refs;\n\n  score.textContent = '0';\n\n  [messageStart, messageLose, messageWin].forEach(({ classList }) =>\n    classList.add('hidden')\n  );\n\n  fieldCells.forEach((cell) => {\n    [...cell.classList].forEach(cls => {\n      if (cls.startsWith('field-cell--')) {\n        cell.classList.remove(cls);\n      }\n    });\n    cell.textContent = '';\n  });\n}\n\nfunction updateStartButton() {\n  const { startBtn } = refs;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n}\n\nfunction moveCells(keyPressed) {\n  updateStartButton();\n\n  const cellsMoved = rearrangeCells(keyPressed);\n  if (cellsMoved) {\n    addCell(getRandomCell(), getToken());\n  }\n\n  if (!hasFreeSpace() && !hasPossibleMoves()) {\n    finishGame(refs.messageLose);\n  }\n}\n\nfunction addCell(cellPosition, cellValue) {\n  if (cellPosition === -1) {\n    return;\n  }\n\n  const { fieldCells } = refs;\n  const cell = fieldCells[cellPosition];\n\n  cell.classList.add(`field-cell--${cellValue}`);\n  cell.textContent = cellValue;\n}\n\nfunction finishGame(endGameMessage) {\n  endGameMessage.classList.remove('hidden');\n  window.removeEventListener('keydown', inputHandler);\n}\n\nfunction updateScore(points) {\n  const { score } = refs;\n  const currentPoints = +score.textContent;\n\n  score.textContent = currentPoints + points;\n}\n\nfunction rearrangeCells(direction) {\n  const { fieldCells, fieldRows } = refs;\n\n  const rows = (direction === 'ArrowLeft' || direction === 'ArrowRight')\n    ? [...fieldRows]\n    : createFieldColumns(fieldCells);\n\n  const initialRowValues = rows\n    .map((row) => [...row.children].map((cel) => cel.textContent))\n    .flat();\n\n  rows.forEach((row) => {\n    const initialCells = (direction === 'ArrowLeft' || direction === 'ArrowUp')\n      ? [...row.children]\n      : [...row.children].reverse();\n\n    const filledCellsValues = initialCells\n      .filter((cell) => cell.textContent !== '')\n      .map(({ textContent }) => parseInt(textContent));\n\n    for (let i = 1; i < filledCellsValues.length; i++) {\n      if (filledCellsValues[i] === filledCellsValues[i - 1]) {\n        filledCellsValues[i - 1] = filledCellsValues[i - 1] * 2;\n        updateScore(filledCellsValues[i - 1]);\n        filledCellsValues.splice(i, 1);\n        filledCellsValues.push('');\n      }\n    }\n\n    const updatedCells = (direction === 'ArrowLeft' || direction === 'ArrowUp')\n      ? [...filledCellsValues, '', '', '', ''].slice(0, FIELD_LENGTH)\n      : [...filledCellsValues, '', '', '', ''].slice(0, FIELD_LENGTH).reverse();\n\n    [...row.children].forEach((cell, i) => {\n      const cellValue = updatedCells[i];\n      cell.textContent = cellValue ? cellValue.toString() : '';\n      [...cell.classList].forEach(cls => {\n        if (cls.startsWith('field-cell--')) {\n          cell.classList.remove(cls);\n        }\n      });\n      if (cellValue) {\n        cell.classList.add(`field-cell--${cellValue}`);\n        if (cellValue === WIN_VALUE) {\n          finishGame(refs.messageWin);\n        }\n      }\n    });\n  });\n\n  const finalRowValues = rows\n    .map((row) => [...row.children].map((cel) => cel.textContent))\n    .flat();\n\n  return !arraysEqual(initialRowValues, finalRowValues);\n}\n\nfunction hasPossibleMoves() {\n  const { fieldRows } = refs;\n\n  for (let rowIndex = 0; rowIndex < fieldRows.length; rowIndex++) {\n    for (let cellIndex = 0; cellIndex < fieldRows[rowIndex].children.length; cellIndex++) {\n      const cell = fieldRows[rowIndex].children[cellIndex];\n      const cellValue = cell.textContent;\n\n      if (\n        (fieldRows[rowIndex].children[cellIndex + 1] &&\n          cellValue === fieldRows[rowIndex].children[cellIndex + 1].textContent) ||\n        (fieldRows[rowIndex + 1] &&\n          cellValue === fieldRows[rowIndex + 1].children[cellIndex].textContent)\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createFieldColumns(cells) {\n  const numCols = cells.length / FIELD_LENGTH;\n  const fieldColumns = [];\n\n  for (let row = 0; row < FIELD_LENGTH; row++) {\n    const children = [];\n    for (let col = 0; col < numCols; col++) {\n      const index = col * FIELD_LENGTH + row;\n      children.push(cells[index]);\n    }\n    fieldColumns.push({ children });\n  }\n\n  return fieldColumns;\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","refs","startBtn","document","querySelector","fieldCells","querySelectorAll","fieldRows","messageStart","messageLose","messageWin","score","inputHandler","param","keyPressed","rows","initialRowValues","key","classList","remove","add","textContent","direction","createFieldColumns","cells","numCols","fieldColumns","row","children","col","index","push","map","cel","flat","forEach","filledCellsValues","initialCells","reverse","filter","cell","parseInt","updateScore","points","currentPoints","splice","updatedCells","concat","cellValue","cls","startsWith","finishGame","arraysEqual","arr1","addCell","getRandomCell","getToken","some","hasPossibleMoves","rowIndex","cellIndex","emptyCells","randomIndex","getRandomNum","maxVal","Math","floor","random","cellPosition","endGameMessage","window","removeEventListener","addEventListener"],"version":3,"file":"index.317c1bb9.js.map"}